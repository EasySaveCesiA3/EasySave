using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq; // Pour Any() et Split avec options
using ClassLog;   // Assurez-vous que cette référence est présente dans votre projet

namespace EasySave
{
    class Program
    {
        public static Historic historic = new();

        static void Main(string[] args)
        {
            // Initialisation de l'historique (suppression de l'ancien fichier et création d'un nouveau)
            historic.DeleteFile();
            historic.CreateFile();

            Console.Clear();

            var gestionnaireSauvegarde = new GestionnaireSauvegarde();
            gestionnaireSauvegarde.SelectionnerLangue();

            // Si des arguments sont fournis, on passe en mode restauration par ligne de commande.
            // Par exemple, exécuter : EasySave.exe 1-3
            if (args.Length > 0)
            {
                string arg = string.Join(" ", args).Trim();
                List<int> indices = GestionnaireSauvegarde.ParseIndices(arg);
                if (indices.Count > 0)
                {
                    gestionnaireSauvegarde.RestaurerSauvegardesCmd(indices);
                }
                else
                {
                    Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("InvalidOption"));
                }
                return; // Fin du programme après restauration commandée.
            }

            // Sinon, on affiche le menu interactif habituel.
            bool continuer = true;
            while (continuer)
            {
                Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("MenuSeparator"));
                Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("MainMenuTitle"));
                Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("MenuSeparator"));
                Console.WriteLine("1. " + gestionnaireSauvegarde.ObtenirMessage("StartBackup"));
                Console.WriteLine("2. " + gestionnaireSauvegarde.ObtenirMessage("ListBackups"));
                Console.WriteLine("3. " + gestionnaireSauvegarde.ObtenirMessage("RestoreBackup"));
                Console.WriteLine("4. " + gestionnaireSauvegarde.ObtenirMessage("ChangeLanguage"));
                Console.WriteLine("5. " + gestionnaireSauvegarde.ObtenirMessage("Exit"));
                Console.Write(gestionnaireSauvegarde.ObtenirMessage("ChooseOption"));

                string? choix = Console.ReadLine();
                if (choix == null)
                {
                    Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("InvalidOption"));
                    continue;
                }

                switch (choix)
                {
                    case "1":
                        gestionnaireSauvegarde.DemarrerSauvegarde();
                        break;
                    case "2":
                        gestionnaireSauvegarde.ListerSauvegardes();
                        break;
                    case "3":
                        gestionnaireSauvegarde.RestaurerSauvegarde();
                        break;
                    case "4":
                        gestionnaireSauvegarde.SelectionnerLangue();
                        break;
                    case "5":
                        continuer = false;
                        Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("ThankYou"));
                        break;
                    default:
                        Console.WriteLine(gestionnaireSauvegarde.ObtenirMessage("InvalidOption"));
                        break;
                }
            }
        }
    }

    class GestionnaireSauvegarde
    {
        private string langue = "fr";

        // Dictionnaire de messages pour différentes langues (ici "fr" et "en", à compléter si besoin)
        private Dictionary<string, Dictionary<string, string>> messages = new Dictionary<string, Dictionary<string, string>>()
        {
            { "fr", new Dictionary<string, string>()
                {
                    // Messages généraux
                    { "MenuSeparator", "--------------------------------------" },
                    { "MainMenuTitle", "        Menu principal EasySave       " },
                    { "StartBackup", "Démarrer une sauvegarde" },
                    { "ListBackups", "Lister les sauvegardes" },
                    { "RestoreBackup", "Restaurer une sauvegarde" },
                    { "ChangeLanguage", "Changer la langue" },
                    { "Exit", "Quitter" },
                    { "ChooseOption", "Choisissez une option: " },
                    { "InvalidOption", "Option invalide, veuillez réessayer." },
                    // Sauvegarde
                    { "EnterBackupName", "Entrez le nom de la sauvegarde: " },
                    { "InvalidBackupName", "Nom de sauvegarde invalide." },
                    { "EnterFolderPath", "Entrez le chemin du dossier à sauvegarder: " },
                    { "FolderNotExist", "Le dossier spécifié n'existe pas. Sauvegarde annulée." },
                    { "StartingBackup", "Démarrage de la sauvegarde '{0}'..." },
                    { "BackupCompleted", "Sauvegarde terminée." },
                    { "FileCopied", "Fichier copié: {0} -> {1}" },
                    { "FileCopyError", "Erreur lors de la copie du fichier '{0}': {1}" },
                    { "NoBackups", "Aucune sauvegarde n'a été effectuée." },
                    { "BackupName", "Nom : {0}, Date : {1}" },
                    // Restauration
                    { "EnterBackupToRestore", "Entrez le nom de la sauvegarde à restaurer ou une plage d'indices (ex. 1-3) : " },
                    { "EnterRestoreDestination", "Entrez le chemin de destination pour la restauration: " },
                    { "InvalidDestination", "Chemin de destination invalide. Restauration annulée." },
                    { "CleaningDestination", "Nettoyage du dossier de destination..." },
                    { "RestoreCompleted", "Restauration terminée." },
                    { "BackupNotExist", "La sauvegarde spécifiée n'existe pas." },
                    { "ThankYou", "Merci d'avoir utilisé EasySave. Au revoir!" },
                    { "SelectLanguage", "Sélectionnez la langue / Select language : " },
                    { "LanguageChangedFr", "La langue a été changée en français." },
                    { "LanguageChangedEn", "La langue a été changée en anglais." },
                    { "LanguageChangedEs", "La langue a été changée en espagnol." },
                    { "LanguageChangedIt", "La langue a été changée en italien." }
                }
            },
            { "en", new Dictionary<string, string>()
                {
                    { "MenuSeparator", "--------------------------------------" },
                    { "MainMenuTitle", "          EasySave Main Menu          " },
                    { "StartBackup", "Start a backup" },
                    { "ListBackups", "List backups" },
                    { "RestoreBackup", "Restore a backup" },
                    { "ChangeLanguage", "Change language" },
                    { "Exit", "Exit" },
                    { "ChooseOption", "Choose an option: " },
                    { "InvalidOption", "Invalid option, please try again." },
                    { "EnterBackupName", "Enter the backup name: " },
                    { "InvalidBackupName", "Invalid backup name." },
                    { "EnterFolderPath", "Enter the path of the folder to backup: " },
                    { "FolderNotExist", "The specified folder does not exist. Backup cancelled." },
                    { "StartingBackup", "Starting backup '{0}'..." },
                    { "BackupCompleted", "Backup completed." },
                    { "FileCopied", "File copied: {0} -> {1}" },
                    { "FileCopyError", "Error copying file '{0}': {1}" },
                    { "NoBackups", "No backups have been made." },
                    { "BackupName", "Name: {0}, Date: {1}" },
                    { "EnterBackupToRestore", "Enter the backup name to restore or a range (e.g. 1-3): " },
                    { "EnterRestoreDestination", "Enter the destination path for restoration: " },
                    { "InvalidDestination", "Invalid destination path. Restoration cancelled." },
                    { "CleaningDestination", "Cleaning destination folder..." },
                    { "RestoreCompleted", "Restoration completed." },
                    { "BackupNotExist", "The specified backup does not exist." },
                    { "ThankYou", "Thank you for using EasySave. Goodbye!" },
                    { "SelectLanguage", "Select language: " },
                    { "LanguageChangedFr", "Language has been changed to French." },
                    { "LanguageChangedEn", "Language has been changed to English." },
                    { "LanguageChangedEs", "Language has been changed to Spanish." },
                    { "LanguageChangedIt", "Language has been changed to Italian." }
                }
            }
            // Vous pouvez ajouter d'autres langues ici...
        };

        // Méthode de sélection de la langue
        public void SelectionnerLangue()
        {
            Console.WriteLine("======================================");
            Console.WriteLine("=          EasySave - Langue         =");
            Console.WriteLine("======================================");
            Console.WriteLine();
            Console.WriteLine(ObtenirMessage("SelectLanguage"));
            Console.WriteLine("fr -> Français");
            Console.WriteLine("en -> English");
            Console.WriteLine("es -> Espagnol");
            Console.WriteLine("it -> Italien");
            Console.Write("Votre choix / Your choice: ");
            string? choixLangue = Console.ReadLine()?.Trim().ToLower();
            if (choixLangue == "fr")
            {
                langue = "fr";
                Console.WriteLine(ObtenirMessage("LanguageChangedFr"));
            }
            else if (choixLangue == "en")
            {
                langue = "en";
                Console.WriteLine(ObtenirMessage("LanguageChangedEn"));
            }
            else if (choixLangue == "es")
            {
                langue = "es";
                Console.WriteLine(ObtenirMessage("LanguageChangedEs"));
            }
            else if (choixLangue == "it")
            {
                langue = "it";
                Console.WriteLine(ObtenirMessage("LanguageChangedIt"));
            }
            else
            {
                Console.WriteLine(ObtenirMessage("InvalidOption"));
                SelectionnerLangue();
            }
        }

        // Méthode pour récupérer un message selon la clé et la langue sélectionnée
        public string ObtenirMessage(string cle)
        {
            if (messages.ContainsKey(langue) && messages[langue].ContainsKey(cle))
                return messages[langue][cle];
            else
                return "Message non trouvé";
        }

        // ----------------------------------------------------
        // Méthode de démarrage de sauvegarde (inchangée)
        // ----------------------------------------------------
        public void DemarrerSauvegarde()
        {
            Console.WriteLine("\n" + ObtenirMessage("MenuSeparator"));
            Console.WriteLine(ObtenirMessage("StartBackup"));
            Console.WriteLine(ObtenirMessage("MenuSeparator"));
            Console.Write(ObtenirMessage("EnterBackupName"));
            string? nomSauvegarde = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(nomSauvegarde))
            {
                Console.WriteLine(ObtenirMessage("InvalidBackupName"));
                return;
            }
            Console.Write(ObtenirMessage("EnterFolderPath"));
            string? cheminDossier = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(cheminDossier) || !Directory.Exists(cheminDossier))
            {
                Console.WriteLine(ObtenirMessage("FolderNotExist"));
                return;
            }
            string cheminDestination = Path.Combine("Sauvegardes", nomSauvegarde);
            if (!Directory.Exists(cheminDestination))
                Directory.CreateDirectory(cheminDestination);
            Console.WriteLine(string.Format(ObtenirMessage("StartingBackup"), nomSauvegarde));
            var stopwatch = Stopwatch.StartNew();
            CopierDossier(cheminDossier, cheminDestination);
            stopwatch.Stop();
            string elapsedTime = $"{stopwatch.ElapsedMilliseconds} ms";
            Program.historic.Backup(nomSauvegarde, cheminDossier, cheminDestination, elapsedTime);
            Console.WriteLine(ObtenirMessage("BackupCompleted"));
        }

        // ----------------------------------------------------
        // Méthode pour lister les sauvegardes (affichage de l'historique)
        // ----------------------------------------------------
        public void ListerSauvegardes()
        {
            Console.WriteLine("\n" + ObtenirMessage("MenuSeparator"));
            Console.WriteLine(ObtenirMessage("ListBackups"));
            Console.WriteLine(ObtenirMessage("MenuSeparator"));
            if (File.Exists(Historic.jsonfile))
                Program.historic.DisplayLog();
            else
                Console.WriteLine(ObtenirMessage("NoBackups"));
            Console.WriteLine(ObtenirMessage("MenuSeparator"));
        }

        // ----------------------------------------------------
        // Méthode de restauration interactive (basée sur la saisie du nom ou d'une plage d'indices)
        // ----------------------------------------------------
        public void RestaurerSauvegarde()
        {
            Console.WriteLine("\n" + ObtenirMessage("MenuSeparator"));
            Console.WriteLine(ObtenirMessage("RestoreBackup"));
            Console.WriteLine(ObtenirMessage("MenuSeparator"));

            // Affichage des sauvegardes disponibles avec un identifiant numérique
            string backupsRoot = "Sauvegardes";
            if (!Directory.Exists(backupsRoot))
            {
                Console.WriteLine(ObtenirMessage("NoBackups"));
                return;
            }
            string[] backupDirs = Directory.GetDirectories(backupsRoot);
            if (backupDirs.Length == 0)
            {
                Console.WriteLine(ObtenirMessage("NoBackups"));
                return;
            }
            Array.Sort(backupDirs);
            Console.WriteLine("Sauvegardes disponibles :");
            for (int i = 0; i < backupDirs.Length; i++)
            {
                string backupName = Path.GetFileName(backupDirs[i]);
                Console.WriteLine($"{i + 1}. {backupName}");
            }

            // L'utilisateur peut saisir soit le nom exact de la sauvegarde,
            // soit une plage d'indices (ex. "1-3" ou "1;3")
            Console.Write(ObtenirMessage("EnterBackupToRestore"));
            string? input = Console.ReadLine()?.Trim();
            if (string.IsNullOrEmpty(input))
            {
                Console.WriteLine(ObtenirMessage("InvalidBackupName"));
                return;
            }

            // Si l'entrée contient '-' ou ';', on l'interprète comme une sélection par indices
            if (input.Contains("-") || input.Contains(";"))
            {
                List<int> indices = ParseIndices(input);
                if (indices.Count == 0)
                {
                    Console.WriteLine(ObtenirMessage("InvalidBackupName"));
                    return;
                }
                // Pour chaque indice, demander individuellement le chemin de destination
                foreach (int index in indices)
                {
                    if (index < 1 || index > backupDirs.Length)
                    {
                        Console.WriteLine($"Indice {index} invalide.");
                        continue;
                    }
                    string backupPath = backupDirs[index - 1];
                    string backupName = Path.GetFileName(backupPath);
                    Console.WriteLine($"Pour la sauvegarde '{backupName}', veuillez saisir le chemin de destination pour la restauration :");
                    string? destination = Console.ReadLine()?.Trim();
                    if (string.IsNullOrEmpty(destination))
                    {
                        Console.WriteLine(ObtenirMessage("InvalidDestination"));
                        continue;
                    }
                    RestoreBackup(backupPath, destination);
                }
                Console.WriteLine(ObtenirMessage("RestoreCompleted"));
                return;
            }
            else
            {
                // On considère que l'utilisateur a saisi le nom exact d'une sauvegarde
                string backupPath = Path.Combine(backupsRoot, input);
                if (!Directory.Exists(backupPath))
                {
                    Console.WriteLine(ObtenirMessage("BackupNotExist"));
                    return;
                }
                Console.Write(ObtenirMessage("EnterRestoreDestination"));
                string? destination = Console.ReadLine()?.Trim();
                if (string.IsNullOrEmpty(destination))
                {
                    Console.WriteLine(ObtenirMessage("InvalidDestination"));
                    return;
                }
                RestoreBackup(backupPath, destination);
                Console.WriteLine(ObtenirMessage("RestoreCompleted"));
            }
        }

        // ----------------------------------------------------
        // Méthode de restauration par ligne de commande (si indices sont fournis en argument)
        // Pour chaque sauvegarde sélectionnée, le programme demande de saisir le chemin source ET le chemin de destination.
        // ----------------------------------------------------
        public void RestaurerSauvegardesCmd(List<int> indices)
        {
            string backupsRoot = "Sauvegardes";
            if (!Directory.Exists(backupsRoot))
            {
                Console.WriteLine(ObtenirMessage("NoBackups"));
                return;
            }
            string[] backupDirs = Directory.GetDirectories(backupsRoot);
            if (backupDirs.Length == 0)
            {
                Console.WriteLine(ObtenirMessage("NoBackups"));
                return;
            }
            Array.Sort(backupDirs);

            // Pour chaque indice fourni
            foreach (int index in indices)
            {
                if (index < 1 || index > backupDirs.Length)
                {
                    Console.WriteLine($"Indice {index} invalide.");
                    continue;
                }
                string backupName = Path.GetFileName(backupDirs[index - 1]);
                // Demande du chemin source (possibilité de laisser vide pour utiliser la valeur par défaut)
                Console.WriteLine($"Pour la sauvegarde '{backupName}', veuillez saisir le chemin source (laisser vide pour utiliser '{Path.Combine(backupsRoot, backupName)}') :");
                string? sourceInput = Console.ReadLine()?.Trim();
                string source = string.IsNullOrEmpty(sourceInput)
                                    ? Path.Combine(backupsRoot, backupName)
                                    : sourceInput;
                // Demande du chemin de destination
                Console.WriteLine($"Veuillez saisir le chemin de destination pour restaurer la sauvegarde '{backupName}' :");
                string? destination = Console.ReadLine()?.Trim();
                if (string.IsNullOrEmpty(destination))
                {
                    Console.WriteLine(ObtenirMessage("InvalidDestination"));
                    continue;
                }
                RestoreBackup(source, destination);
            }
            Console.WriteLine(ObtenirMessage("RestoreCompleted"));
        }

        // ----------------------------------------------------
        // Méthode qui réalise la restauration d'un backup depuis 'backupPath' vers 'destination'
        // ----------------------------------------------------
        private void RestoreBackup(string backupPath, string destination)
        {
            // Nettoyage du dossier de destination avant restauration
            if (Directory.Exists(destination))
            {
                try
                {
                    Console.WriteLine(ObtenirMessage("CleaningDestination"));
                    DirectoryInfo directory = new DirectoryInfo(destination);
                    foreach (FileInfo file in directory.GetFiles())
                        file.Delete();
                    foreach (DirectoryInfo dir in directory.GetDirectories())
                        dir.Delete(true);
                }
                catch (Exception ex)
                {
                    Console.WriteLine(string.Format(ObtenirMessage("FileCopyError"), destination, ex.Message));
                    return;
                }
            }
            else
            {
                Directory.CreateDirectory(destination);
            }
            Console.WriteLine($"Restauration de la sauvegarde '{Path.GetFileName(backupPath)}' vers '{destination}'...");
            CopierDossier(backupPath, destination);
        }

        // ----------------------------------------------------
        // Méthode utilitaire pour copier récursivement un dossier
        // ----------------------------------------------------
        private void CopierDossier(string sourceDir, string destinationDir)
        {
            if (!Directory.Exists(destinationDir))
                Directory.CreateDirectory(destinationDir);
            foreach (var file in Directory.GetFiles(sourceDir))
            {
                string destFile = Path.Combine(destinationDir, Path.GetFileName(file));
                try
                {
                    File.Copy(file, destFile, true);
                    Console.WriteLine(string.Format(ObtenirMessage("FileCopied"), file, destFile));
                }
                catch (Exception ex)
                {
                    Console.WriteLine(string.Format(ObtenirMessage("FileCopyError"), file, ex.Message));
                }
            }
            foreach (var dir in Directory.GetDirectories(sourceDir))
            {
                string destDir = Path.Combine(destinationDir, Path.GetFileName(dir));
                CopierDossier(dir, destDir);
            }
        }

        // ----------------------------------------------------
        // Méthode utilitaire pour parser une chaîne d'indices (ex. "1-3" ou "1;3")
        // ----------------------------------------------------
        public static List<int> ParseIndices(string input)
        {
            var indices = new List<int>();
            input = input.Replace(" ", ""); // suppression des espaces
            string[] parts = input.Split(new char[] { ';', ',' }, StringSplitOptions.RemoveEmptyEntries);
            foreach (var part in parts)
            {
                if (part.Contains("-"))
                {
                    string[] rangeParts = part.Split('-');
                    if (rangeParts.Length == 2 &&
                        int.TryParse(rangeParts[0], out int start) &&
                        int.TryParse(rangeParts[1], out int end))
                    {
                        for (int i = start; i <= end; i++)
                        {
                            if (!indices.Contains(i))
                                indices.Add(i);
                        }
                    }
                }
                else
                {
                    if (int.TryParse(part, out int num))
                    {
                        if (!indices.Contains(num))
                            indices.Add(num);
                    }
                }
            }
            return indices;
        }
    }
}
